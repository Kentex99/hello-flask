name: CI/CD

on:
  push:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    environment: production

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id:    ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region:           ${{ secrets.AWS_REGION }}

      - name: Log in to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag & push Docker image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: hello-flask
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:latest .
          docker tag    $ECR_REGISTRY/$ECR_REPOSITORY:latest $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push   $ECR_REGISTRY/$ECR_REPOSITORY:latest
          docker push   $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

      - name: Deploy to Elastic Beanstalk
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: hello-flask
          IMAGE_TAG: ${{ github.sha }}
          APPLICATION_NAME: hello-flask
          ENVIRONMENT_NAME: hello-flask-env
        run: |
          # 1) Generate a v1 Dockerrun (single-container)
          cat > Dockerrun.aws.json <<EOD
          {
            "AWSEBDockerrunVersion": "1",
            "Image": { "Name": "${ECR_REGISTRY}/${ECR_REPOSITORY}:${IMAGE_TAG}", "Update": "true" },
            "Ports": [ { "ContainerPort": 5000 } ]
          }
          EOD

          # 2) Zip it up,including .ebextensions for config
          zip -r deploy.zip Dockerrun.aws.json .ebextensions

          # 3) Ask EB for its S3 bucket
          S3_BUCKET=$(aws elasticbeanstalk create-storage-location --output text)

          # 4) Upload the zip to S3
          aws s3 cp deploy.zip s3://$S3_BUCKET/$IMAGE_TAG.zip

          # 5) Create a new application version
          aws elasticbeanstalk create-application-version \
            --application-name $APPLICATION_NAME \
            --version-label $IMAGE_TAG \
            --source-bundle S3Bucket=$S3_BUCKET,S3Key=$IMAGE_TAG.zip

          # 6) Update the environment
          aws elasticbeanstalk update-environment \
            --environment-name $ENVIRONMENT_NAME \
            --version-label $IMAGE_TAG
